[
{
	"uri": "/system/",
	"title": "System",
	"tags": [],
	"description": "",
	"content": "RegistreHash"
},
{
	"uri": "/reseau/",
	"title": "Reseau",
	"tags": [],
	"description": "",
	"content": "IP"
},
{
	"uri": "/web/",
	"title": "Web",
	"tags": [],
	"description": "",
	"content": "HTML"
},
{
	"uri": "/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "CTF Formatif Cette plateforme permet de se former sur certaines technologies et appliquer les connaissances acquises sur une partie CTF (Capture The Flag).\nSujet couvert  Systeme - a decrire Reseau - a decrire Web - a decrire  "
},
{
	"uri": "/system/registres/",
	"title": "Registre",
	"tags": [],
	"description": "",
	"content": "La base de registre est un élément fondamental du système. C\u0026rsquo;est une gigantesque base de données qui peut atteindre plusieurs dizaines de méga. Afin de faciliter la gestion de cette base, celle ci est organisée en 5 clés principales, elles mêmes divisées en sous clés.\nLes 5 clés et leurs fonctions HKEY_CLASS_ROOT : Cette clé gère les extensions des fichiers ainsi que les liaisons avec les logiciels et serveurs ActiveX. Toutes les extensions des fichiers et leur programme correspondant sont gérés ici. Lorsque vous cliquez sur un document ayant une extension .xls par exemple, Windows saura qu\u0026rsquo;il devra charger Excel pour ouvrir le fichier.\nCertains menus contextuels sont également gérés ici, de même que les composants communs de Windows et les Dll et Exe Active X, les contrôles complémentaires, etc. Si les inscriptions de ces composants sont modifiés, vous pouvez au pire en plus pouvoir vous servir du programme qui en a besoin.\n/CLSID : Gestion des identificateurs de classe des objets COM\n/Extension : Cette clé gère les extensions de fichiers. Certaines extensions ne figurent cependant pas dans cette clé, il faut alors regarder du côté du type de fichier\n/Applications : Cette clé gère certains menus contextuels.\n/Directory : Clé gérant les menus contextuels du bouton démarrer.\n/Drive : Gestion des menus contextuels des lecteurs.\n/Folder : Icône et menus contextuels des dossiers\nHKEY_CURRENT_USER : Cette clé contient toutes les informations de l\u0026rsquo;utilisateur connecté (celui qui utilise le PC) : paramètres des dossiers et couleurs d\u0026rsquo;écran et du panneau de configuration. C\u0026rsquo;est une sous clé de HKEY_USERS\n/AppEvents : Cette clé contient les événements systèmes et leurs sons correspondants (allez jeter un oeil dans le panneau de configuration \u0026gt; sons et périphériques audio \u0026gt; sons)\n/EventLabels : Ce sont les événements système.\n/ControlPanel : Cette branche gère tous les paramètres du panneau de configuration.\n/keyboard/layout : Configuration du clavier.\n/Printers : Ce sont les paramètres d\u0026rsquo;impression et de l\u0026rsquo;assistant d\u0026rsquo;ajout d\u0026rsquo;imprimante.\n/Software : Ce sont les paramètres de certains composants des programmes ou du système d\u0026rsquo;exploitation\nHKEY_LOCAL_MACHINE : C\u0026rsquo;est la clé principale du registre avec HKEY_CLASS_ROOT : elle contient les paramètres de l\u0026rsquo;ordinateur et des logiciels.\nCes paramètres peuvent se changer lors de la modification d\u0026rsquo;un paramètre dans Windows ou un programme.\n/Software/Classes : Cette clé est une copie intégrale de la clé HKEY_CLASSES_ROOT.\n/Hardware : Cette clé contient toutes les informations sur le processeur, la taille de la mémoire et la gestion Plug and play de Windows. Les données sont initialisées à chaque démarrage, une modification des valeurs est donc inutile (non, vous n\u0026rsquo;aurez jamais un Pentium 4 à 10 Ghz !)\n/Software : Cette clé contient les informations sur les applications et les composants systèmes de windows.\n/System : Cette clé contient les paramètres de Windows nécessaires à chaque démarrage, ainsi que des paramètres nécessaires à certains programmes.\n/CurrentControlSet : Paramètres du système et des services (voir l\u0026rsquo;article consacré aux services)\n/Control/ComputerName : C\u0026rsquo;est le nom de votre ordinateur (visible dans le réseau)\nHKEY_USERS : Cette clé contient tous les profils utilisateurs et leurs paramètres. Lors de la création d\u0026rsquo;un nouveau profil, le modèle de départ est la clé par défaut.\nHKEY_CURRENT_CONFIG : Cette clé contient des informations sur le profil matériel utilisé au démarrage de l\u0026rsquo;ordinateur. Cette clé travaille avec le Plug and play de Windows.\nLes différents types de données :\nLes clés stockent des données. Ces données peuvent être de différents types :\nREG_BINARY : Ce sont des données binaires contenant des bits (0 ou 1). Ce type de donnée s\u0026rsquo;applique surtout aux composants matériels.\nREG_DWORD : Ce type de donnée comprend des données constituées de quartets (4 octets) et est surtout utilisé pour les pilotes de périphériques et les services apparentés.\nREG_EXPAND_SZ : Ce sont des chaînes de longueur variable. Elles contiennent une variable que le système remplace : %windir% est la variable qui contient le nom de dossier contenant windows.\nREG_MULTI_DZ : Ce sont des chaînes multiples qui contiennent des successions ou des listes de variables.\nREG_SZ : C\u0026rsquo;est une chaîne texte de longueur fixe.\nREG_FULL_RESOURCE_DESCRIPTOR : Ce type de données qui ne s\u0026rsquo;applique qu\u0026rsquo;à Windows XP contient des tableaux imbriqués stockant une liste de ressources correspondant à un matériel ou à un pilote.\n"
},
{
	"uri": "/system/hash/",
	"title": "Hash",
	"tags": [],
	"description": "",
	"content": "La somme de contrôle (Hash) La version basique d’un tel mécanisme est appelée “somme de contrôle”.\nLe but d’une somme de contrôle est en quelque sorte d’être “l’empreinte” d’une donnée (attention, cette “empreinte” n’est pas une signature et ne garantit pas pour autant l’identité). Un exemple très simplifié serait de compter le nombre de lettres dans un message et de rajouter ce nombre à la fin dudit message. De cette manière, un destinataire peut immédiatement vérifier que le message n’a pas été coupé par erreur.\nUn mécanisme de ce type, bien qu’un peu plus complexe, est utilisé pour vérifier votre numéro de compte IBAN. Les deux derniers chiffres sont en effet une somme de contrôle (selon un algorithme un peu compliqué à résumer) des chiffres précédents. Un mécanisme similaire est appliqué aux cartes de crédit. Cela signifie que si vous entrez un mauvais chiffre par erreur lors d’un paiement, votre banque en ligne le détectera immédiatement. Bien entendu, ces systèmes sont simples et ne permettent que de détecter des erreurs involontaires.\nLes algorithmes de hashage C’est pour cela qu’ont été développés les algorithmes de “hashage”, littéralement qui mixent, mélangent les données. Les plus connus sont aujourd’hui la famille de fonctions SHA-2 et SHA-3.\nLe principe d’un algorithme de hashage est de générer, pour n’importe quelle information de n’importe quelle taille, une empreinte unique. Voici par exemple le hash SHA-2 256 bits d’un fichier sur mon ordinateur :\n9eb4ef548e36a589a46ef00395f3e2f722f5466438c9385976ab188bec59fa2d\n4 propriétés fondamentales Cette empreinte, ou plutôt ce hash, possède plusieurs propriétés particulièrement intéressantes.\nPremièrement, elle est “déterministe”. Cela signifie que si je prends le même fichier, j’aurai toujours une seule et même empreinte unique.\nEn deuxième lieu, elle est “chaotique”. Ça veut dire que si je change même très légèrement la donnée initiale, l’empreinte sera complètement différente. Voici par exemple le hash du même fichier avec un simple espace rajouté à la fin:\n260f4c3c44574df5c73dd2d1216e88d0c4137da3d1394d661875232bf4c50d0a\nTroisièmement, le hash est à sens unique. Si on peut toujours déterminer le même hash à partir du fichier, il est strictement impossible de retrouver le fichier à partir du hash. La seule solution est d’essayer tous les fichiers possibles. Dans certains cas, c’est cependant possible (par exemple si on a le hash d’un mot de passe dont on sait que la longueur est limitée, il est relativement simple de tester toutes les combinaisons).\nQuatrième propriété et non des moindres : un bon hash ne permet pas les collisions. Cela signifie que deux fichiers différents ne peuvent pas avoir le même hash. Le hash est donc unique, c’est une sorte d’empreinte digitale unique du fichier. Lorsque des chercheurs découvrent une collision, on dit que l’algorithme de hash est “cassé”. Il ne faut plus lui faire confiance et ne plus l’utiliser (c’est par exemple le cas de SHA-1 et de MD5. Ces fonctions ne doivent donc plus être utilisées).\nPour des raisons pratiques, un bon algorithme de hash sera également très rapide et donnera toujours une empreinte de taille fixée.\nLa finitude du hashage Votre réaction sera certainement de considérer que puisque la taille d’un hash est fixée et qu’il existe un nombre infini de fichiers possibles, alors forcément, il doit exister des fichiers avec le même hash.\nC’est vrai théoriquement mais relativisons. SHA-256 permet 2 exposant 256 hash possibles. Cela signifie que si 10 milliards d’êtres humains possédaient chacun un super ordinateurs capables de produire 1 milliard de fichiers avec leur hash à chaque seconde, il faudrait encore attendre l’âge de l’univers avant d’avoir une chance raisonnable d’obtenir une collision. Autrement dit, on peut considérer une collision comme impossible.\nConclusion En résumé, le hash est l’équivalent du numéro de carte d’identité d’un fichier ou d’une donnée. Comme tout est donnée et que la cryptographie est la science visant à sécuriser l’échange de données, le hash est un outil de base, indispensable. Il s’agit d’une fondation essentielle à la plupart des systèmes cryptographiques.\nMais comme nous l’avons vu, un bon hash requiert des propriétés très strictes : déterministe, chaotique, à sens unique et résistante aux collisions. Un mauvais hash peut miner tout un édifice cryptographique : si l’attaquant peut trouver des collisions, il pourra introduire n’importe quel message dans le système !\nC’est la raison pour laquelle il existe peu d’algorithmes de hashage très populaires et que ceux-ci sont d’une grande complexité interne.\nMais nul besoin de plonger dans la complexité. Si vous avez retenu et compris les quatre grandes propriétés, vous êtes armés pour mieux comprendre la cryptographie.\nLe Petit Cryptographe est une initiative de l’UCL Crypto Group soutenu par le FEDER dans le cadre du projet CryptoMedia/UserMedia.\n"
},
{
	"uri": "/web/html/",
	"title": "HTML",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/reseau/ip/",
	"title": "IP",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "contributors and packages used by hugo-theme-docdock",
	"content": "github contributors Other contribution Packages and libraries  Bootstrap - front-end framework mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; JavaScript-autoComplete - An extremely lightweight and powerful vanilla JavaScript completion suggester. clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support reveal-js - The HTML Presentation Framework  Tooling  Netlify - Continuous deployement and hosting of this documentation Hugo   "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]